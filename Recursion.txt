//Recursion

#include <iostream>
using namespace std;

int getSum(int *arr, int size){
    // base case
    if( size == 0)
    {
        return 0;
    }
    if(size == 1)
    {
        return arr[0];
    }
    
    int remainingPart = getSum(arr+1, size+1);
    
    int sum = arr[0] + remainingPart;
    
    return sum;
}

int main()
{
    int arr[5] = {2,4,9,9,9};
    int size = 5;
    
    int sum = getSum(arr , size);
    
    cout << "the sum is " << sum << endl;

    return 0;
}

// Linear search by recursion

#include <iostream>
using namespace std;
void print(int arr[], int n){
    
    cout << "size of array is "<< n << endl;
    
    for(int i = 0; i<n; i++){
        cout<< arr[i] << " ";
    } 
    cout<< endl;

}

bool linearSearch(int arr[], int size, int k){
    // bool case
    print(arr, size);
    if(size == 0){
        return false;
    }
    if(arr[0] == k ){
        return true;
    }
    else{
        bool remaningPart = linearSearch(arr+1,size-1,k);
        return remaningPart;
    }
}
int main()
{
    int arr[5] = {3,5,1,2,6};
    int size = 5;
    int key = 8;
    bool ans = linearSearch(arr, size, key);
    
    if(ans){
        cout << "Present" << endl;
    }
    else{
        cout<< "Absent" << endl;
    }
    return 0;
}


//Binary search by recursion

#include <iostream>
using namespace std;

void print(int arr[], int s, int e){
    
    for(int i=s; i<=e; i++){
        cout<< arr[i] <<" ";
    }cout<< endl;
}
bool binarySearch(int *arr, int s, int e, int k){
    print(arr, s, e);
    // base case
    if(s>e){
        return false;
    }
    int mid = (s+e)/2;
    // element found
    if(arr[mid] == k){
        return true;
    }
    if(arr[mid]<k){
        return binarySearch(arr,mid+1,e,k);
    }
    else{
        return binarySearch(arr,mid+1,e,k);
    }
}
int main()
{
   int arr[5] = {1,2,4,8,9};
   int size = 5;
   int k = 9;
   
   cout << "Present or not " << binarySearch(arr, 0, 5, k) << endl ; 

    return 0;
}

